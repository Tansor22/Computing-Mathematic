package controllers;


import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import net.objecthunter.exp4j.Expression;
import net.objecthunter.exp4j.ExpressionBuilder;
import utils.*;

import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class MainController extends Controller {
    @FXML
    private BorderPane rootBox;
    @FXML
    private TextArea out;
    @FXML
    private ToolBar toolBar;
    private String func;
    private double eps;
    private double lags;
    private int begin;
    private int end;
    private int cn;

    double step = 3;
    double sigma = 0.1;

    private double[] x;
    private double[] y;

    private void addSigma() {
        for (int i = 0; i < cn; i++) {
            y[i] += (ThreadLocalRandom.current().nextInt(-10, 11) * 0.1 * sigma);
            try {
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void genTable() {
        x = new double[(int) Math.round((end - begin) / step) + 1];
        y = new double[(int) Math.round((end - begin) / step) + 1];
        cn = 0;
        Expression e = new ExpressionBuilder(func).variable("x").build();
        for (double _x = begin; _x <= end; _x += step) {
            x[cn] = _x;
            y[cn++] = e.setVariable("x", _x).evaluate();
        }
    }

    private double def(int i, int n) {
        if ((i + 3) >= cn) return 0;
        if (n == 1)
            if (i == 0)
                return ((-3 * y[i]) + (4 * y[i + 1]) - y[i + 2]) / (2 * step);
            else
                return (y[i + 1] - y[i - 1]) / (2 * step);
        else if (i == 0)
            return ((-3 * def(i, n - 1)) + (4 * def(i + 1, n - 1)) - def(i + 2, 2)) / (2 * step);
        else
            return (def(i + 1, n - 1) - def(i - 1, n - 1)) / (2 * step);
    }

    private boolean getParams() {
        //Получение данных
        TextField field = (TextField) toolBar.lookup("#lagField");
        String text = field.getText();
        if (!Helper.isDouble(text)) return false;
        lags = Double.valueOf(text);

        field = (TextField) toolBar.lookup("#epsField");
        text = field.getText();
        if (!Helper.isDouble(text)) return false;
        eps = Double.parseDouble(text);

        field = (TextField) toolBar.lookup("#beginField");
        text = field.getText();
        if (!Helper.isInteger(text)) return false;
        begin = Integer.parseInt(text);

        field = (TextField) toolBar.lookup("#endField");
        text = field.getText();
        if (!Helper.isInteger(text)) return false;
        end = Integer.parseInt(text);

        /*field = (TextField) toolBar.lookup("#funcField");
        text = field.getText();
        func = text;*/
        return true;
    }

    @Override
    public void beforeShow() {
        //Подсказка
       /* final Label helpLabel = (Label) toolBar.lookup("#helpLabel");
        final Tooltip helpTooltip = new Tooltip("Правила записи подынтегральной функции:\n" +
                "Сложение: 2 + 2\n" +
                "Вычитание: 2 - 2\n" +
                "Умножение: 2 * 2\n" +
                "Деление: 2 / 2\n" +
                "Возведение в степень: 2 ^ 2\n" +
                "Унарные минус и плюс: +2 - (-2)\n" +
                "Остаток от деления: 2 % 2\n" +
                "Встроенные функции: \n" +
                "abs: Абсолютное значение\n" +
                "acos: Арккосинус\n" +
                "asin: Арксинус\n" +
                "atan: Арктангенс\n" +
                "cbrt: Кубический корень\n" +
                "ceil: Ближайшее целое сверху\n" +
                "cos: Косинус\n" +
                "cosh: Гиперболический косинус\n" +
                "exp: Экспонента (e^x)\n" +
                "floor: Ближайшее целое снизу\n" +
                "log: Натуральный логарифм (основание e)\n" +
                "log10: Логариф (основание 10)\n" +
                "log2: Логарифм (основание 2)\n" +
                "sin: Синус\n" +
                "sinh: Гиперболический синус\n" +
                "sqrt: квадратный корень\n" +
                "tan: Тангенс\n" +
                "tanh: Гиперболический тангенс\n" +
                "signum: Сигнум");
        helpLabel.setOnMouseMoved(event -> helpTooltip.show(helpLabel, event.getScreenX(), event.getScreenY() + 15));
        helpLabel.setOnMouseExited(event -> helpTooltip.hide());
*/
        // Установка системного потока вывода на TextArea
        try {
            System.setOut(new PrintStream(new Console(out),true, StandardCharsets.UTF_8.displayName()));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        //Программирование кнопки
        Button button = (Button) toolBar.lookup("#calculateButton");
        button.setOnAction(event -> {
            if (getParams()) {
                genTable();

                System.out.println("Функция - " + func);
                System.out.println("Точные значения: ");
                for (int i = 0; i < cn; i++)
                    System.out.printf("x = %.4f, y = %.4f, y' = %.4f, y'' = %.4f, y''' = %.4f;\n",
                            x[i], y[i], def(i, 1), def(i, 2), def(i, 3));

                addSigma();
                System.out.println("С возмущениями: ");

                for (int i = 0; i < cn; i++)
                    System.out.printf("x = %.4f, y = %.4f, y' = %.4f, y'' = %.4f, y''' = %.4f;\n",
                            x[i], y[i], def(i, 1), def(i, 2), def(i, 3));
            } else {
                Helper.showAlert("Не все поля заполнены корректно!");
            }
        });
    }
}
